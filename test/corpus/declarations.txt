==================
Standard declaration
==================
data /www/std_decl type string.
---
(source
    (data_declaration
        (data_spec
            (identifier)
            (type))))

==================
Data declaration with like reference
==================

data /www/std_decl like some_other_variable.
---
(source
    (data_declaration
        (data_spec
            (identifier)
            (identifier))))

==================
Standard declaration + value
==================

data /www/std_decl type string value 'MY_VALUE'.
---
(source
    (data_declaration
        (data_spec
            (identifier)
            (type)
            (literal_string))))

==================
Data decl with explicit initial value
==================

data /www/std_decl type string value is initial.
---
(source
    (data_declaration
        (data_spec
            (identifier)
            (type))))

==================
Standard declaration + length + value
==================

data /www/std_decl type p length 3 value '100'.
---
(source
    (data_declaration
    (data_spec
        (identifier)
        (type)
        (number)
        (literal_string))))

==================
Standard declaration + value + length
==================

data /www/std_decl type p value '100' length 3.
---
(source
    (data_declaration
        (data_spec
            (identifier)
            (type)
            (literal_string)
            (number))))

==================
Standard declaration + value + length + decimals
==================

data /www/std_decl type p value '100.22' length 3 decimals 5.
---
(source
    (data_declaration
        (data_spec
            (identifier)
            (type)
            (literal_string)
            (number)
            (number))))

==================
Standard declaration + read-only
==================

data /www/std_decl type p value '100.22' length 3 decimals 5 read-only.
---
(source
    (data_declaration
        (data_spec
            (identifier)
            (type)
            (literal_string)
            (number)
            (number))))

==================
Standard declaration with buffer notation
==================

data /www/std_decl(20) type c.
---
(source
    (data_declaration
        (data_spec
            (identifier)
            (number)
            (type))))

==================
Multiple declarations
==================

data /www/std_decl1(30) type c value 'BUFFER_TEST'.
data /www/std_decl2 like some_ref_var read-only.
data /www/std_decl3 type p length 5 decimals 2 value '12.34'.
---
(source
    (data_declaration
        (data_spec
            (identifier)
            (number)
            (type)
            (literal_string)))
    (data_declaration
        (data_spec
            (identifier)
            (identifier)))
    (data_declaration
        (data_spec
            (identifier)
            (type)
            (number)
            (number)
            (literal_string))))

==================
Inline declaration
==================

data(/zzada/_inline_decl)
---
(source
    (inline_declaration
        (identifier)))

==================
Final Inline declaration
==================

final(/iwfnd/my_var)
---
(source
    (inline_declaration
        (identifier)))

==================
Final Inline declaration + assignment
==================

final(/iwfnd/my_var) = 100.
---
(source
    (inline_declaration
        (identifier)
        (number)))

==================
Data declaration multi line.
==================

data  /www/std_decl 
type    string
.
---
(source
    (data_declaration
        (data_spec
            (identifier)
            (type))))

==================
Multiple separate data declarations
==================

data  /www/std_decl type /aawd/da/_some_type length 10 value is initial.
data  /www/sec_valu type /typ/_some_type length 10 read-only.
---
(source
    (data_declaration
        (data_spec
            (identifier)
            (type)
            (number)))
    (data_declaration
        (data_spec
            (identifier)
            (type)
            (number))))

==================
Multi-Line Data Declarations
==================
data:
  name type string value `John Doe`,
  age type i value 30,
  id(10) type c,
  active type abap_bool value 'X',
  score type p length 8 decimals 2 value '98.75'.
---
(source
    (data_declaration
        (data_spec
            (identifier)
            (type)
            (literal_string))
        (data_spec
            (identifier)
            (type)
            (number))
        (data_spec
            (identifier)
            (number)
            (type))
        (data_spec
            (identifier)
            (type)
            (literal_string))
        (data_spec
            (identifier)
            (type)
            (number)
            (number)
            (literal_string))))

==================
Complex Collapsed Nested Struct Declaration 
==================
DATA: BEGIN OF customer_order,
        order_id     TYPE i,
        status       TYPE string,
        BEGIN OF customer,
          customer_no TYPE p LENGTH 10 DECIMALS 0 VALUE '1000000001',
          BEGIN OF contact,
            name      TYPE string,
            email     TYPE string,
            BEGIN OF address,
              street  TYPE string,
              city    TYPE string,
              zipcode TYPE p LENGTH 5 DECIMALS 0,
              country TYPE string VALUE 'US',
            END OF address,
          END OF contact,
        END OF customer,
      END OF customer_order.
---
(source
    (data_declaration
    (struct_data_spec
        (identifier)
        (data_spec
            (identifier)
            (type))
        (data_spec
            (identifier)
            (type))
        (struct_data_spec
            (identifier)
            (data_spec
                (identifier)
                (type)
                (number)
                (number)
                (literal_string))
        (struct_data_spec
            (identifier)
            (data_spec
                (identifier)
                (type))
            (data_spec
                (identifier)
                (type))
            (struct_data_spec
                (identifier)
                (data_spec
                    (identifier)
                    (type))
                (data_spec
                    (identifier)
                    (type))
                (data_spec
                    (identifier)
                    (type)
                    (number)
                    (number))
                (data_spec
                    (identifier)
                    (type)
                    (literal_string))
                (identifier))
            (identifier))
        (identifier))
        (identifier))))

==================
Complex Expanded Nested Struct Declaration 
==================
DATA BEGIN OF customer_order.
DATA order_id TYPE i.
DATA status TYPE string.
    DATA BEGIN OF customer.
        DATA customer_no TYPE p LENGTH 10 DECIMALS 0 VALUE '1000000001'.
        DATA BEGIN OF contact.
            DATA name TYPE string.
            DATA email TYPE string.
            DATA BEGIN OF address.
                DATA street TYPE string.
                DATA city TYPE string.
                DATA zipcode TYPE p LENGTH 5 DECIMALS 0.
                DATA country TYPE string VALUE 'US'.
            DATA END OF address.
        DATA END OF contact.
    DATA END OF customer.
DATA END OF customer_order.
---
(source
    (data_declaration
    (struct_data_spec
        (identifier)
        (data_spec
            (identifier)
            (type))
        (data_spec
            (identifier)
            (type))
        (struct_data_spec
            (identifier)
            (data_spec
                (identifier)
                (type)
                (number)
                (number)
                (literal_string))
        (struct_data_spec
            (identifier)
            (data_spec
                (identifier)
                (type))
            (data_spec
                (identifier)
                (type))
            (struct_data_spec
                (identifier)
                (data_spec
                    (identifier)
                    (type))
                (data_spec
                    (identifier)
                    (type))
                (data_spec
                    (identifier)
                    (type)
                    (number)
                    (number))
                (data_spec
                    (identifier)
                    (type)
                    (literal_string))
                (identifier))
            (identifier))
        (identifier))
        (identifier))))